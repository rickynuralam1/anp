import { PropType } from 'vue';
declare const CIcon: import("vue").DefineComponent<{
    /**
     * Use `:icon="..."` instead of
     *
     * @deprecated since version 3.0
     */
    content: {
        type: (StringConstructor | ArrayConstructor)[];
        default: undefined;
        required: false;
    };
    /**
     * Use for replacing default CIcon component classes. Prop is overriding the 'size' prop.
     */
    customClassName: {
        type: (StringConstructor | ArrayConstructor | ObjectConstructor)[];
        default: undefined;
        required: false;
    };
    /**
     * Name of the icon placed in React object or SVG content.
     */
    icon: {
        type: PropType<string | string[]>;
        default: undefined;
        required: false;
    };
    /**
     * Use `icon="..."` instead of
     *
     * @deprecated since version 3.0
     */
    name: {
        type: StringConstructor;
        default: undefined;
        required: false;
    };
    /**
     * Size of the icon. Available sizes: 'sm', 'lg', 'xl', 'xxl', '3xl...9xl', 'custom', 'custom-size'.
     */
    size: {
        type: StringConstructor;
        default: undefined;
        required: false;
        validator: (value: string) => boolean;
    };
    /**
     * Title tag content.
     */
    title: {
        type: StringConstructor;
        default: undefined;
        required: false;
    };
    /**
     * If defined component will be rendered using 'use' tag.
     */
    use: {
        type: StringConstructor;
        default: undefined;
        required: false;
    };
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    /**
     * Use `:icon="..."` instead of
     *
     * @deprecated since version 3.0
     */
    content: {
        type: (StringConstructor | ArrayConstructor)[];
        default: undefined;
        required: false;
    };
    /**
     * Use for replacing default CIcon component classes. Prop is overriding the 'size' prop.
     */
    customClassName: {
        type: (StringConstructor | ArrayConstructor | ObjectConstructor)[];
        default: undefined;
        required: false;
    };
    /**
     * Name of the icon placed in React object or SVG content.
     */
    icon: {
        type: PropType<string | string[]>;
        default: undefined;
        required: false;
    };
    /**
     * Use `icon="..."` instead of
     *
     * @deprecated since version 3.0
     */
    name: {
        type: StringConstructor;
        default: undefined;
        required: false;
    };
    /**
     * Size of the icon. Available sizes: 'sm', 'lg', 'xl', 'xxl', '3xl...9xl', 'custom', 'custom-size'.
     */
    size: {
        type: StringConstructor;
        default: undefined;
        required: false;
        validator: (value: string) => boolean;
    };
    /**
     * Title tag content.
     */
    title: {
        type: StringConstructor;
        default: undefined;
        required: false;
    };
    /**
     * If defined component will be rendered using 'use' tag.
     */
    use: {
        type: StringConstructor;
        default: undefined;
        required: false;
    };
}>>, {
    name: string;
    content: string | unknown[];
    customClassName: string | Record<string, any> | unknown[];
    icon: string | string[];
    size: string;
    title: string;
    use: string;
}, {}>;
export { CIcon };

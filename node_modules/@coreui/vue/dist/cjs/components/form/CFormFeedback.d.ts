declare const CFormFeedback: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    /**
     * Component used for the root node. Either a string to use a HTML element or a component.
     */
    as: {
        type: StringConstructor;
        default: string;
    };
    /**
     * Method called immediately after the `value` prop changes.
     */
    invalid: BooleanConstructor;
    /**
     * If your form layout allows it, you can display validation feedback in a styled tooltip.
     */
    tooltip: BooleanConstructor;
    /**
     * Set component validation state to valid.
     */
    valid: BooleanConstructor;
}>, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    /**
     * Component used for the root node. Either a string to use a HTML element or a component.
     */
    as: {
        type: StringConstructor;
        default: string;
    };
    /**
     * Method called immediately after the `value` prop changes.
     */
    invalid: BooleanConstructor;
    /**
     * If your form layout allows it, you can display validation feedback in a styled tooltip.
     */
    tooltip: BooleanConstructor;
    /**
     * Set component validation state to valid.
     */
    valid: BooleanConstructor;
}>> & Readonly<{}>, {
    invalid: boolean;
    as: string;
    tooltip: boolean;
    valid: boolean;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export { CFormFeedback };

declare const CNav: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    /**
     * Component used for the root node. Either a string to use a HTML element or a component.
     */
    as: {
        type: StringConstructor;
        default: string;
    };
    /**
     * Specify a layout type for component.
     *
     * @values 'fill', 'justified'
     */
    layout: {
        type: StringConstructor;
        validator: (value: string) => boolean;
    };
    /**
     * Set the nav variant to tabs or pills.
     *
     * @values 'enclosed', 'enclosed-pills', 'pills', 'tabs', 'underline', 'underline-border'
     */
    variant: {
        type: StringConstructor;
        validator: (value: string) => boolean;
    };
}>, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    /**
     * Component used for the root node. Either a string to use a HTML element or a component.
     */
    as: {
        type: StringConstructor;
        default: string;
    };
    /**
     * Specify a layout type for component.
     *
     * @values 'fill', 'justified'
     */
    layout: {
        type: StringConstructor;
        validator: (value: string) => boolean;
    };
    /**
     * Set the nav variant to tabs or pills.
     *
     * @values 'enclosed', 'enclosed-pills', 'pills', 'tabs', 'underline', 'underline-border'
     */
    variant: {
        type: StringConstructor;
        validator: (value: string) => boolean;
    };
}>> & Readonly<{}>, {
    as: string;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export { CNav };

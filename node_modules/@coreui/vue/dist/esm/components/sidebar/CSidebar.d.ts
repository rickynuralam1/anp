declare const CSidebar: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    /**
     * Sets if the color of text should be colored for a light or dark dark background.
     *
     * @values 'dark', light'
     */
    colorScheme: {
        type: StringConstructor;
        default: undefined;
        validator: (value: string) => boolean;
    };
    /**
     * Make sidebar narrow.
     */
    narrow: BooleanConstructor;
    /**
     * Set sidebar to overlaid variant.
     */
    overlaid: BooleanConstructor;
    /**
     * Components placement, there’s no default placement.
     * @values 'start', 'end'
     */
    placement: {
        type: StringConstructor;
        default: undefined;
        validator: (value: string) => boolean;
    };
    /**
     * Place sidebar in non-static positions.
     */
    position: {
        type: StringConstructor;
        validator: (value: string) => boolean;
    };
    /**
     * Size the component small, large, or extra large.
     */
    size: {
        type: StringConstructor;
        validator: (value: string) => boolean;
    };
    /**
     * Expand narrowed sidebar on hover.
     */
    unfoldable: BooleanConstructor;
    /**
     * Toggle the visibility of sidebar component.
     */
    visible: {
        type: BooleanConstructor;
        default: undefined;
    };
}>, () => any[], {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("hide" | "show" | "visible-change")[], "hide" | "show" | "visible-change", import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    /**
     * Sets if the color of text should be colored for a light or dark dark background.
     *
     * @values 'dark', light'
     */
    colorScheme: {
        type: StringConstructor;
        default: undefined;
        validator: (value: string) => boolean;
    };
    /**
     * Make sidebar narrow.
     */
    narrow: BooleanConstructor;
    /**
     * Set sidebar to overlaid variant.
     */
    overlaid: BooleanConstructor;
    /**
     * Components placement, there’s no default placement.
     * @values 'start', 'end'
     */
    placement: {
        type: StringConstructor;
        default: undefined;
        validator: (value: string) => boolean;
    };
    /**
     * Place sidebar in non-static positions.
     */
    position: {
        type: StringConstructor;
        validator: (value: string) => boolean;
    };
    /**
     * Size the component small, large, or extra large.
     */
    size: {
        type: StringConstructor;
        validator: (value: string) => boolean;
    };
    /**
     * Expand narrowed sidebar on hover.
     */
    unfoldable: BooleanConstructor;
    /**
     * Toggle the visibility of sidebar component.
     */
    visible: {
        type: BooleanConstructor;
        default: undefined;
    };
}>> & Readonly<{
    onHide?: ((...args: any[]) => any) | undefined;
    onShow?: ((...args: any[]) => any) | undefined;
    "onVisible-change"?: ((...args: any[]) => any) | undefined;
}>, {
    visible: boolean;
    placement: string;
    colorScheme: string;
    narrow: boolean;
    overlaid: boolean;
    unfoldable: boolean;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export { CSidebar };

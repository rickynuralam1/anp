declare const CFormControlWrapper: import("vue").DefineComponent<{
    floatingClassName?: string | undefined;
    floatingLabel?: string | undefined;
    id?: string | undefined;
    label?: string | undefined;
    text?: string | undefined;
    invalid?: boolean | undefined;
    valid?: boolean | undefined;
    feedback?: string | undefined;
    describedby?: string | undefined;
    feedbackInvalid?: string | undefined;
    feedbackValid?: string | undefined;
    tooltipFeedback?: boolean | undefined;
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}> | ("" | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}> | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>[] | undefined)[], {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<{
    floatingClassName?: string | undefined;
    floatingLabel?: string | undefined;
    id?: string | undefined;
    label?: string | undefined;
    text?: string | undefined;
    invalid?: boolean | undefined;
    valid?: boolean | undefined;
    feedback?: string | undefined;
    describedby?: string | undefined;
    feedbackInvalid?: string | undefined;
    feedbackValid?: string | undefined;
    tooltipFeedback?: boolean | undefined;
}> & Readonly<{}>, {} | {
    [x: string]: any;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
export { CFormControlWrapper };
